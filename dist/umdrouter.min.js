/*! UMDRouter - v0.0.1 - 2013-12-20 */
!function(a, b) {
    "function" == typeof define && define.amd ? define([], b) : "object" == typeof exports ? module.exports = b() : a.UMDRouter = b();
}(this, function() {
    var a = function() {
        var a = this;
        window.onhashchange = function() {
            a.process();
        }, window.onload = function() {
            a.process();
        };
    };
    return a.prototype.routes = {}, a.prototype.history = [], a.prototype.process = function() {
        var a = this, b = a.match(), c = b.route, d = b.args, e = !0, f = !1, g = [];
        0 !== a.history.length && (f = a.routes[a.history[a.history.length - 1]]), c && (g = a.routes[c], 
        f && f.unload && f.unload.apply(this), g.before && (e = g.before.apply(this, d), 
        void 0 === e && (e = !0)), e || a.go(a.history[a.history.length - 1]), g.load && e && (g.load.apply(this, d), 
        a.history.push(c)));
    }, a.prototype.match = function() {
        var a, b, c, d, e = this, f = window.location.hash.replace("#", ""), g = [], h = !1;
        if ("/" === f || "" === f && e.routes.hasOwnProperty("/")) h = "/"; else for (b in e.routes) if (a = f.match(new RegExp(b.replace(/:[^\s/]+/g, "([\\w-]+)"))), 
        null !== a && "/" !== b) {
            if (g = [], a.length > 1) for (c = 1, d = a.length; d > c; c++) g.push(a[c]);
            h = {
                route: b,
                args: g
            };
        }
        return h;
    }, a.prototype.reload = function() {
        this.process();
    }, a.prototype.on = function(a, b) {
        if (this.routes[a] = {}, b && "function" == typeof b) this.routes[a].before = !1, 
        this.routes[a].load = b, this.routes[a].unload = !1; else {
            if (!b || "object" != typeof b) throw "Error creating route";
            this.routes[a].before = b.before ? b.before : !1, this.routes[a].load = b.load ? b.load : !1, 
            this.routes[a].unload = b.unload ? b.unload : !1;
        }
    }, a.prototype.go = function(a) {
        var b, c = window.location, d = c.pathname.replace(/[^\/]$/, "$&"), e = this;
        b = a.length ? d + c.search + "#" + a : d + c.search, history.pushState ? (history.pushState(null, document.title, b), 
        e.process()) : (c.replace(d + b), e.process());
    }, a;
});